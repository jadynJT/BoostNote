createdAt: "2020-02-07T13:08:24.013Z"
updatedAt: "2020-02-07T13:32:50.982Z"
type: "MARKDOWN_NOTE"
folder: "8c2b19fa277dc0d5adf5"
title: "内存泄漏"
tags: []
content: '''
  ### 内存泄漏
  
  ##### 几种内存泄漏情况
  * ###### block循环引用
  * ###### NSTimer未释放并置空
  * ###### NSNotification没有remove
  * ###### delegate循环引用
  
  
  ##### 常规检测方法
  * ###### 静态分析(analyze)
  * ###### Instruments中的Leak动态
  
  ##### 使用第三方检测
  * ###### MLeaksFinder
  
  
  ---
   
  
  ### 优化编译速度
  ##### ccache
  * ###### 能够把编译的中间产物缓存起来的工具
  * ###### CCache 在首次编译的时候因为需要更新缓存，会造成编译时间变长差不多一倍
  * ###### 需要移除所有pch文件，因为当你修改了 PCH 或者 PCH 引用到的头文件的内容时，会造成全部缓存失效，只能全部重新编译
  * ###### 缓存命中率：
  ```
  1）命中：可以直接通过缓存获取到需要的数据。 
  2）不命中：无法直接通过缓存获取到想要的数据，需要再次查询数据库或者执行其它的操作。原因可能是由于缓存中根本不存在，或者缓存已经过期。
  3）缓存命中率越高表示使用缓存越频繁，效益越高、性能越好
  ```
          
  
  
  
  ##### 分布式编译
  * ###### 原理是把一部分需要编译的文件发送到服务器上，服务器编译完成后把编译产物传回来。
  * ###### 把编译任务分派到内网的多台服务器上。但是其他编译服务器的 CPU 占用总是很低，只有 20% 左右；也就是说分派任务的速度甚至还赶不上服务器编译的速度。
  * ###### 分派任务然后回传编译产物这个过程所耗费的时间超过了本地直接编译。
  
  ---
  
  ### 查看奔溃日志
  
  ##### dsym
  * ###### 分析崩溃日志的函数地址
  * ###### 将日志中的函数地址映射出对应的函数名和方法名
  
  
'''
linesHighlighted: []
isStarred: false
isTrashed: false
